Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.kafka will be created
  + resource "docker_container" "kafka" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = [
          + "KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092",
          + "KAFKA_BROKER_ID=1",
          + "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1",
          + "KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181",
        ]
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = "confluentinc/cp-kafka:7.5.0"
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "kafka"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + healthcheck (known after apply)

      + labels (known after apply)

      + networks_advanced {
          + aliases      = []
          + name         = "kafka-network"
            # (2 unchanged attributes hidden)
        }

      + ports {
          + external = 9092
          + internal = 9092
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_container.kafka_ui will be created
  + resource "docker_container" "kafka_ui" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = [
          + "KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092",
          + "KAFKA_CLUSTERS_0_NAME=local",
        ]
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = "provectuslabs/kafka-ui:latest"
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "kafka-ui"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + healthcheck (known after apply)

      + labels (known after apply)

      + networks_advanced {
          + aliases      = []
          + name         = "kafka-network"
            # (2 unchanged attributes hidden)
        }

      + ports {
          + external = 8080
          + internal = 8080
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_container.zookeeper will be created
  + resource "docker_container" "zookeeper" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = [
          + "ALLOW_ANONYMOUS_LOGIN=yes",
        ]
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = "bitnami/zookeeper:latest"
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "zookeeper"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + healthcheck (known after apply)

      + labels (known after apply)

      + networks_advanced {
          + aliases      = []
          + name         = "kafka-network"
            # (2 unchanged attributes hidden)
        }

      + ports {
          + external = 2181
          + internal = 2181
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.kafka will be created
  + resource "docker_image" "kafka" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "confluentinc/cp-kafka:7.5.0"
      + repo_digest = (known after apply)
    }

  # docker_image.kafka_ui will be created
  + resource "docker_image" "kafka_ui" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "provectuslabs/kafka-ui:latest"
      + repo_digest = (known after apply)
    }

  # docker_image.zookeeper will be created
  + resource "docker_image" "zookeeper" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "bitnami/zookeeper:latest"
      + repo_digest = (known after apply)
    }

  # docker_network.kafka will be created
  + resource "docker_network" "kafka" {
      + driver      = (known after apply)
      + id          = (known after apply)
      + internal    = (known after apply)
      + ipam_driver = "default"
      + name        = "kafka-network"
      + options     = (known after apply)
      + scope       = (known after apply)

      + ipam_config (known after apply)
    }

Plan: 7 to add, 0 to change, 0 to destroy.

docker_image.zookeeper: Creating...
docker_network.kafka: Creating...
docker_image.kafka: Creating...
docker_image.kafka_ui: Creating...
docker_network.kafka: Creation complete after 2s [id=fd6608c8fcc80eb3ca90af9aa5f572c791ae77187ca1e8cba437e1beb460f5e0]
docker_image.zookeeper: Still creating... [10s elapsed]
docker_image.kafka: Still creating... [10s elapsed]
docker_image.kafka_ui: Still creating... [10s elapsed]
docker_image.kafka: Still creating... [20s elapsed]
docker_image.kafka_ui: Still creating... [20s elapsed]
docker_image.zookeeper: Still creating... [20s elapsed]
docker_image.zookeeper: Still creating... [30s elapsed]
docker_image.kafka_ui: Still creating... [30s elapsed]
docker_image.kafka: Still creating... [30s elapsed]
docker_image.kafka: Still creating... [40s elapsed]
docker_image.zookeeper: Still creating... [40s elapsed]
docker_image.kafka_ui: Still creating... [40s elapsed]
docker_image.kafka_ui: Still creating... [50s elapsed]
docker_image.zookeeper: Still creating... [50s elapsed]
docker_image.kafka: Still creating... [50s elapsed]
docker_image.kafka: Still creating... [1m0s elapsed]
docker_image.zookeeper: Still creating... [1m0s elapsed]
docker_image.kafka_ui: Still creating... [1m0s elapsed]
docker_image.kafka: Still creating... [1m10s elapsed]
docker_image.kafka_ui: Still creating... [1m10s elapsed]
docker_image.zookeeper: Still creating... [1m10s elapsed]
docker_image.kafka_ui: Creation complete after 1m18s [id=sha256:8f2ff02d64b0a7a2b71b6b3b3148b85f66d00ec20ad40c30bdcd415d46d31818provectuslabs/kafka-ui:latest]
docker_image.kafka: Still creating... [1m20s elapsed]
docker_image.zookeeper: Still creating... [1m20s elapsed]
docker_image.zookeeper: Still creating... [1m30s elapsed]
docker_image.kafka: Still creating... [1m30s elapsed]
docker_image.zookeeper: Creation complete after 1m36s [id=sha256:733bc558e691762c1b7c6664d013fee614e614afe2b4d69125e18508bf06c62dbitnami/zookeeper:latest]
docker_container.zookeeper: Creating...
docker_container.zookeeper: Creation complete after 0s [id=5263f6ce5a5c29e140eefbbb7ac904b923d2e2a2f0e568d6099fae7c0fffdeb7]
docker_image.kafka: Still creating... [1m40s elapsed]
docker_image.kafka: Still creating... [1m50s elapsed]
docker_image.kafka: Still creating... [2m0s elapsed]
docker_image.kafka: Still creating... [2m10s elapsed]
docker_image.kafka: Creation complete after 2m11s [id=sha256:fbbb6fa11b258a88b83f54d4f0bddfcffbf2279f99d66a843486e3da7bdfbf41confluentinc/cp-kafka:7.5.0]
docker_container.kafka: Creating...
docker_container.kafka: Creation complete after 1s [id=0d214f094a15111daf66c49cdb176448a10aaa81674bf5c4477c3d5724040ffb]
docker_container.kafka_ui: Creating...
docker_container.kafka_ui: Creation complete after 1s [id=531ca5d777ae32640c96d2b92808646e4f56aa7ec068bc06807e044a26a7974b]

Apply complete! Resources: 7 added, 0 changed, 0 destroyed.
