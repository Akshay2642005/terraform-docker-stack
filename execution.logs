
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # docker_container.kafka[0m will be created
[0m  [32m+[0m[0m resource "docker_container" "kafka" {
      [32m+[0m[0m attach                                      = false
      [32m+[0m[0m bridge                                      = (known after apply)
      [32m+[0m[0m command                                     = (known after apply)
      [32m+[0m[0m container_logs                              = (known after apply)
      [32m+[0m[0m container_read_refresh_timeout_milliseconds = 15000
      [32m+[0m[0m entrypoint                                  = (known after apply)
      [32m+[0m[0m env                                         = [
          [32m+[0m[0m "KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092",
          [32m+[0m[0m "KAFKA_BROKER_ID=1",
          [32m+[0m[0m "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1",
          [32m+[0m[0m "KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181",
        ]
      [32m+[0m[0m exit_code                                   = (known after apply)
      [32m+[0m[0m hostname                                    = (known after apply)
      [32m+[0m[0m id                                          = (known after apply)
      [32m+[0m[0m image                                       = "confluentinc/cp-kafka:7.5.0"
      [32m+[0m[0m init                                        = (known after apply)
      [32m+[0m[0m ipc_mode                                    = (known after apply)
      [32m+[0m[0m log_driver                                  = (known after apply)
      [32m+[0m[0m logs                                        = false
      [32m+[0m[0m must_run                                    = true
      [32m+[0m[0m name                                        = "kafka"
      [32m+[0m[0m network_data                                = (known after apply)
      [32m+[0m[0m read_only                                   = false
      [32m+[0m[0m remove_volumes                              = true
      [32m+[0m[0m restart                                     = "no"
      [32m+[0m[0m rm                                          = false
      [32m+[0m[0m runtime                                     = (known after apply)
      [32m+[0m[0m security_opts                               = (known after apply)
      [32m+[0m[0m shm_size                                    = (known after apply)
      [32m+[0m[0m start                                       = true
      [32m+[0m[0m stdin_open                                  = false
      [32m+[0m[0m stop_signal                                 = (known after apply)
      [32m+[0m[0m stop_timeout                                = (known after apply)
      [32m+[0m[0m tty                                         = false
      [32m+[0m[0m wait                                        = false
      [32m+[0m[0m wait_timeout                                = 60

      [32m+[0m[0m healthcheck (known after apply)

      [32m+[0m[0m labels (known after apply)

      [32m+[0m[0m networks_advanced {
          [32m+[0m[0m aliases      = []
          [32m+[0m[0m name         = "kafka-network"
            [90m# (2 unchanged attributes hidden)[0m[0m
        }

      [32m+[0m[0m ports {
          [32m+[0m[0m external = 9092
          [32m+[0m[0m internal = 9092
          [32m+[0m[0m ip       = "0.0.0.0"
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # docker_container.kafka_ui[0m will be created
[0m  [32m+[0m[0m resource "docker_container" "kafka_ui" {
      [32m+[0m[0m attach                                      = false
      [32m+[0m[0m bridge                                      = (known after apply)
      [32m+[0m[0m command                                     = (known after apply)
      [32m+[0m[0m container_logs                              = (known after apply)
      [32m+[0m[0m container_read_refresh_timeout_milliseconds = 15000
      [32m+[0m[0m entrypoint                                  = (known after apply)
      [32m+[0m[0m env                                         = [
          [32m+[0m[0m "KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092",
          [32m+[0m[0m "KAFKA_CLUSTERS_0_NAME=local",
        ]
      [32m+[0m[0m exit_code                                   = (known after apply)
      [32m+[0m[0m hostname                                    = (known after apply)
      [32m+[0m[0m id                                          = (known after apply)
      [32m+[0m[0m image                                       = "provectuslabs/kafka-ui:latest"
      [32m+[0m[0m init                                        = (known after apply)
      [32m+[0m[0m ipc_mode                                    = (known after apply)
      [32m+[0m[0m log_driver                                  = (known after apply)
      [32m+[0m[0m logs                                        = false
      [32m+[0m[0m must_run                                    = true
      [32m+[0m[0m name                                        = "kafka-ui"
      [32m+[0m[0m network_data                                = (known after apply)
      [32m+[0m[0m read_only                                   = false
      [32m+[0m[0m remove_volumes                              = true
      [32m+[0m[0m restart                                     = "no"
      [32m+[0m[0m rm                                          = false
      [32m+[0m[0m runtime                                     = (known after apply)
      [32m+[0m[0m security_opts                               = (known after apply)
      [32m+[0m[0m shm_size                                    = (known after apply)
      [32m+[0m[0m start                                       = true
      [32m+[0m[0m stdin_open                                  = false
      [32m+[0m[0m stop_signal                                 = (known after apply)
      [32m+[0m[0m stop_timeout                                = (known after apply)
      [32m+[0m[0m tty                                         = false
      [32m+[0m[0m wait                                        = false
      [32m+[0m[0m wait_timeout                                = 60

      [32m+[0m[0m healthcheck (known after apply)

      [32m+[0m[0m labels (known after apply)

      [32m+[0m[0m networks_advanced {
          [32m+[0m[0m aliases      = []
          [32m+[0m[0m name         = "kafka-network"
            [90m# (2 unchanged attributes hidden)[0m[0m
        }

      [32m+[0m[0m ports {
          [32m+[0m[0m external = 8080
          [32m+[0m[0m internal = 8080
          [32m+[0m[0m ip       = "0.0.0.0"
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # docker_container.zookeeper[0m will be created
[0m  [32m+[0m[0m resource "docker_container" "zookeeper" {
      [32m+[0m[0m attach                                      = false
      [32m+[0m[0m bridge                                      = (known after apply)
      [32m+[0m[0m command                                     = (known after apply)
      [32m+[0m[0m container_logs                              = (known after apply)
      [32m+[0m[0m container_read_refresh_timeout_milliseconds = 15000
      [32m+[0m[0m entrypoint                                  = (known after apply)
      [32m+[0m[0m env                                         = [
          [32m+[0m[0m "ALLOW_ANONYMOUS_LOGIN=yes",
        ]
      [32m+[0m[0m exit_code                                   = (known after apply)
      [32m+[0m[0m hostname                                    = (known after apply)
      [32m+[0m[0m id                                          = (known after apply)
      [32m+[0m[0m image                                       = "bitnami/zookeeper:latest"
      [32m+[0m[0m init                                        = (known after apply)
      [32m+[0m[0m ipc_mode                                    = (known after apply)
      [32m+[0m[0m log_driver                                  = (known after apply)
      [32m+[0m[0m logs                                        = false
      [32m+[0m[0m must_run                                    = true
      [32m+[0m[0m name                                        = "zookeeper"
      [32m+[0m[0m network_data                                = (known after apply)
      [32m+[0m[0m read_only                                   = false
      [32m+[0m[0m remove_volumes                              = true
      [32m+[0m[0m restart                                     = "no"
      [32m+[0m[0m rm                                          = false
      [32m+[0m[0m runtime                                     = (known after apply)
      [32m+[0m[0m security_opts                               = (known after apply)
      [32m+[0m[0m shm_size                                    = (known after apply)
      [32m+[0m[0m start                                       = true
      [32m+[0m[0m stdin_open                                  = false
      [32m+[0m[0m stop_signal                                 = (known after apply)
      [32m+[0m[0m stop_timeout                                = (known after apply)
      [32m+[0m[0m tty                                         = false
      [32m+[0m[0m wait                                        = false
      [32m+[0m[0m wait_timeout                                = 60

      [32m+[0m[0m healthcheck (known after apply)

      [32m+[0m[0m labels (known after apply)

      [32m+[0m[0m networks_advanced {
          [32m+[0m[0m aliases      = []
          [32m+[0m[0m name         = "kafka-network"
            [90m# (2 unchanged attributes hidden)[0m[0m
        }

      [32m+[0m[0m ports {
          [32m+[0m[0m external = 2181
          [32m+[0m[0m internal = 2181
          [32m+[0m[0m ip       = "0.0.0.0"
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # docker_image.kafka[0m will be created
[0m  [32m+[0m[0m resource "docker_image" "kafka" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m image_id    = (known after apply)
      [32m+[0m[0m name        = "confluentinc/cp-kafka:7.5.0"
      [32m+[0m[0m repo_digest = (known after apply)
    }

[1m  # docker_image.kafka_ui[0m will be created
[0m  [32m+[0m[0m resource "docker_image" "kafka_ui" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m image_id    = (known after apply)
      [32m+[0m[0m name        = "provectuslabs/kafka-ui:latest"
      [32m+[0m[0m repo_digest = (known after apply)
    }

[1m  # docker_image.zookeeper[0m will be created
[0m  [32m+[0m[0m resource "docker_image" "zookeeper" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m image_id    = (known after apply)
      [32m+[0m[0m name        = "bitnami/zookeeper:latest"
      [32m+[0m[0m repo_digest = (known after apply)
    }

[1m  # docker_network.kafka[0m will be created
[0m  [32m+[0m[0m resource "docker_network" "kafka" {
      [32m+[0m[0m driver      = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m internal    = (known after apply)
      [32m+[0m[0m ipam_driver = "default"
      [32m+[0m[0m name        = "kafka-network"
      [32m+[0m[0m options     = (known after apply)
      [32m+[0m[0m scope       = (known after apply)

      [32m+[0m[0m ipam_config (known after apply)
    }

[1mPlan:[0m 7 to add, 0 to change, 0 to destroy.
[0m[0m[1mdocker_image.zookeeper: Creating...[0m[0m
[0m[1mdocker_network.kafka: Creating...[0m[0m
[0m[1mdocker_image.kafka: Creating...[0m[0m
[0m[1mdocker_image.kafka_ui: Creating...[0m[0m
[0m[1mdocker_network.kafka: Creation complete after 2s [id=fd6608c8fcc80eb3ca90af9aa5f572c791ae77187ca1e8cba437e1beb460f5e0][0m
[0m[1mdocker_image.zookeeper: Still creating... [00m10s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [00m10s elapsed][0m[0m
[0m[1mdocker_image.kafka_ui: Still creating... [00m10s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [00m20s elapsed][0m[0m
[0m[1mdocker_image.kafka_ui: Still creating... [00m20s elapsed][0m[0m
[0m[1mdocker_image.zookeeper: Still creating... [00m20s elapsed][0m[0m
[0m[1mdocker_image.zookeeper: Still creating... [00m30s elapsed][0m[0m
[0m[1mdocker_image.kafka_ui: Still creating... [00m30s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [00m30s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [00m40s elapsed][0m[0m
[0m[1mdocker_image.zookeeper: Still creating... [00m40s elapsed][0m[0m
[0m[1mdocker_image.kafka_ui: Still creating... [00m40s elapsed][0m[0m
[0m[1mdocker_image.kafka_ui: Still creating... [00m50s elapsed][0m[0m
[0m[1mdocker_image.zookeeper: Still creating... [00m50s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [00m50s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [01m00s elapsed][0m[0m
[0m[1mdocker_image.zookeeper: Still creating... [01m00s elapsed][0m[0m
[0m[1mdocker_image.kafka_ui: Still creating... [01m00s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [01m10s elapsed][0m[0m
[0m[1mdocker_image.kafka_ui: Still creating... [01m10s elapsed][0m[0m
[0m[1mdocker_image.zookeeper: Still creating... [01m10s elapsed][0m[0m
[0m[1mdocker_image.kafka_ui: Creation complete after 1m18s [id=sha256:8f2ff02d64b0a7a2b71b6b3b3148b85f66d00ec20ad40c30bdcd415d46d31818provectuslabs/kafka-ui:latest][0m
[0m[1mdocker_image.kafka: Still creating... [01m20s elapsed][0m[0m
[0m[1mdocker_image.zookeeper: Still creating... [01m20s elapsed][0m[0m
[0m[1mdocker_image.zookeeper: Still creating... [01m30s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [01m30s elapsed][0m[0m
[0m[1mdocker_image.zookeeper: Creation complete after 1m36s [id=sha256:733bc558e691762c1b7c6664d013fee614e614afe2b4d69125e18508bf06c62dbitnami/zookeeper:latest][0m
[0m[1mdocker_container.zookeeper: Creating...[0m[0m
[0m[1mdocker_container.zookeeper: Creation complete after 0s [id=5263f6ce5a5c29e140eefbbb7ac904b923d2e2a2f0e568d6099fae7c0fffdeb7][0m
[0m[1mdocker_image.kafka: Still creating... [01m40s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [01m50s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [02m00s elapsed][0m[0m
[0m[1mdocker_image.kafka: Still creating... [02m10s elapsed][0m[0m
[0m[1mdocker_image.kafka: Creation complete after 2m11s [id=sha256:fbbb6fa11b258a88b83f54d4f0bddfcffbf2279f99d66a843486e3da7bdfbf41confluentinc/cp-kafka:7.5.0][0m
[0m[1mdocker_container.kafka: Creating...[0m[0m
[0m[1mdocker_container.kafka: Creation complete after 1s [id=0d214f094a15111daf66c49cdb176448a10aaa81674bf5c4477c3d5724040ffb][0m
[0m[1mdocker_container.kafka_ui: Creating...[0m[0m
[0m[1mdocker_container.kafka_ui: Creation complete after 1s [id=531ca5d777ae32640c96d2b92808646e4f56aa7ec068bc06807e044a26a7974b][0m
[0m[1m[32m
Apply complete! Resources: 7 added, 0 changed, 0 destroyed.
[0m